What this function do
=====================

This function divides all elements of a matrix

HOW IT WORKS
============

the user will pass the matrix to be divided and  a divided into a function
then the function will iterate over the elements of this function and divide them by a dividend

::

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [
	...	[2, 4, 6],
	...	[8, 4, 6]
	... ]
	>>> print(matrix_divided(matrix, 2))
	[[1.0, 2.0, 3.0], [4.0, 2.0, 3.0]]

The original matrix will not be changed

::

	>>> print(matrix)
	[[2, 4, 6], [8, 4, 6]]

If the quotient is a float it will be rounded to two decimal places

::

	>>> matrix = [
	...	[1, 2, 3],
	...	[4, 5, 6]
	... ]

	>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

If you have a matrix with elements which are floats, this function also can work

::

	>>> matrix = [
	...	[4.6, 6.4, 8.6],
	...	[8.6, 6.4, 4.6]
	... ]

	>>> print(matrix_divided(matrix, 2))
	[[2.3, 3.2, 4.3], [4.3, 3.2, 2.3]]

integers and floats also you can combine them if you want, the function will work

::

	>>> matrixi = [
	...	[4.6, -2, 6.4],
	...	[4, 8.6, -6]
	... ]
	>>> print(matrix_divided(matrix, 2))
	[[2.3, 3.2, 4.3], [4.3, 3.2, 2.3]]

If matrix is not is not a list of lists of integers or floats, a TypeError will be gotten

::

	>>> matrix = 'fab'

	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

::

	>>> matrix = None
	>>> print(matrix_divided(matrix, 4))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

An empty list will give an error

::

	>>> matrix = []
	>>> print(matrix_divided(matrix, 4))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

A list of an empty list will work

::

	>>> matrix = [[]]
	>>> print(matrix_divided(matrix, 2))
	[[]]

If we have list but not a list of list, we will get an error

::

	>>> matrix = [1, 2, 3]
	>>> print(matrix_divided(matrix, 2))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

All rows must be of the same size, means that all lists in a matix must have the same number of elements

::

	>>> matrix = [
	...	[1, 2, 3, 4],
	...	[2, 3, 4]
	... ]

	>>> print(matrix_divided(matrix, 2))
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

If one of the elements of list in matrix is neither an int nor float, an error is gotten

::

	>>> matrix = [
	...	[1, 'fab', 3],
	...	[1, 2, 3]
	... ]

	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

WITH DIV which is not an int or float
=====================================

If div is not an int or a float, an error will be gotten

::

	>>> matrix = [
	...	[2, 4, 6],
	...	[4, 12, 8]
	... ]

	>>> print(matrix_divided(matrix, 'fab'))
	Traceback (most recent call last):
	TypeError: div must be a number

::

	>>> matrix = [
	...	[2, 4, 6],
	...	[4, 12, 8]
	... ]

	>>> print(matrix_divided(matrix, None))
	Traceback (most recent call last):
	TypeError: div must be a number

If div is 0, a ZeroDivisionError will be gotten


::

	>>> matrix = [
	...	[2, 4, 6],
	...	[4, 12, 8]
	... ]

	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
	ZeroDivisionError: division by zero
	
