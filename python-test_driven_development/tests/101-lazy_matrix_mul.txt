How lazy_matrix_multiplication works
===================================

this function multiply matrices by using numpy module, which is a non built in function


	>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

	>>> m_a = [
	... [1, 2],
	... [9, 4]
	...	]
	>>> m_b = [
	... [3, 4],
	... [1, 5]
	...	]
	>>> print(lazy_matrix_mul(m_a, m_b))
	[[ 5 14]
	 [31 56]]



	>>> m_a = [[0, 1]]
	>>> m_b = [
	... [1, 2],
	... [2, 4]
	...	]
	>>> print(lazy_matrix_mul(m_a, m_b))
	[[2 4]]



The function will also work with matrix of foalting number

::

	>>> m_a = [
	... [1.2, 3.1],
	... [2.2, 6.1]
	...	]

	>>> m_b = [
	... [8.4, 1.2],
	... [6.4, 3.2]
	...	]
	>>> print(lazy_matrix_mul(m_a, m_b))
	[[29.92 11.36]
	 [57.52 22.16]]



The function should receive at least two argument otherwise the error will raise

::

	>>> print(lazy_matrix_mul(m_a))
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'



	>>> print(lazy_matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 2 required positional arguments:
	'm_a' and 'm_b'



If wrong value of matrix is provided the function will rise an error

::

	>>> m_a = [
	... [2, 3],
	... [4, 6]	
	...	]
	>>> m_b = [
	... [7, 6],
	... [8, 10],
	... [90, 67]
	...	]

	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)



If one matrix provided is empty error will be raised

::

	>>> print(lazy_matrix_mul([[]], [[3, 1], [9, 4]]))
	Traceback (most recent call last):
	ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)



	>>> print(lazy_matrix_mul([[5, 6], [7, 8]], [[]]))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)



If element of matrices is not int or float Error will be raised

::

	>>> print(lazy_matrix_mul([[10, 9]], "hello world"))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead



	>>> print(lazy_matrix_mul("hello world", [[21, 92]]))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead



	>>> print(lazy_matrix_mul("hello world", "hello world"))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead



If one matrix have none value theError will raise

::

	>>> print(lazy_matrix_mul(None, None))
	Traceback (most recent call last):
	TypeError: Object arrays are not currently supported



Each matrix must be a list of list otherwise Error will raise

::

	>>> print(lazy_matrix_mul([80, 9], [[3, 4]]))
	Traceback (most recent call last):
        ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

	

	>>> print(lazy_matrix_mul([[1, 2]], [3, 4]))
        [11]

	

	>>> print(lazy_matrix_mul([1, 2], [3, 4]))
    	11



Not list of list but also it should contain only int all float otherwise it will

raise error

::

	>>> print(lazy_matrix_mul([[1, "non-number"]], [[3, 4]]))
    	Traceback (most recent call last):
    	ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

    	

	>>> print(lazy_matrix_mul([[5, 6], [7, 8]], [[5, "6"], [7, 8]]))
    	Traceback (most recent call last):
    	TypeError: invalid data type for einsum

    	

	>>> print(lazy_matrix_mul([[1, "hello world"]], [[{"a": 1}, 8.8]]))
    	Traceback (most recent call last):
    	TypeError: Object arrays are not currently supported



The length of row of both matrix must be equal otherwise ValueError will raise

::

	>>> m_a = [
    	... [1, 2],
    	... [3, 4, 5]
    	... ]
    	>>> m_b = [
    	... [1, 2],
    	... [3, 4]
    	... ]
    	>>> print(lazy_matrix_mul(m_a, m_b))
    	Traceback (most recent call last):
    	ValueError: setting an array element with a sequence.

    	

	>>> m_a = [
    	... [1, 2],
    	... [3, 4]
    	... ]

    	>>> m_b = [
    	... [1, 2],
    	... [3, 4, 5]
    	... ]

    	>>> print(lazy_matrix_mul(m_a, m_b))
    	Traceback (most recent call last):
    	ValueError: setting an array element with a sequence.

    	

	>>> m_a = [
    	... [1, 2],
    	... [3, 4, 5]
    	... ]
    	>>> m_b = m_a
    	>>> print(lazy_matrix_mul(m_a, m_b))
    	Traceback (most recent call last):
    	ValueError: setting an array element with a sequence.
